@page "/config"
@using AutoMapper
@using FourTwenty.Core.Data.Interfaces
@using FourTwenty.IoT.Connect.Dto
@using FourTwenty.IoT.Connect.Entities
@using GrowIoT.Interfaces
@using GrowIoT.ViewModels
@inject IIoTConfigService IoTConfigService
@inject IAsyncRepository<GrowBox, int> GrowRepo
@inject IMapper Mapper
@inject IToastService ToastService

<div class="container">
    <div class="row">
        <div class="col">
            <h3>ConfigView</h3>
            @if (Config == null)
            {
                <h4>No config available</h4>

            }
        </div>
    </div>
    @if (Config != null)
    {
        <div class="row">
            <div class="col">
                Port: @Config.ListeningPort<br />
                Version: @Config.CurrentVersion<br />
            </div>
        </div>

    }
    <div class="row mt-3">
        <div class="col-12 col-md-6">
            <EditForm Model="@Box" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="Title">Title</label>
                    <InputText id="Title" @bind-Value="Box.Title" aria-describedby="titlehelp" class="form-control" />
                    <ValidationMessage For="@(()=>Box.Title)" class="text-danger" />
                    <small id="titlehelp" class="form-text text-muted">Enter growbox title.</small>
                </div>
                <div class="form-group">
                    <label for="Description">Description</label>
                    <InputTextArea id="Description" @bind-Value="Box.Description" aria-describedby="descriptionHelp" class="form-control" />
                    <ValidationMessage For="@(()=>Box.Description)" class="text-danger"></ValidationMessage>
                    <small id="descriptionHelp" class="form-text text-muted">Enter growbox description.</small>
                </div>
                <div class="form-group">
                    <label for="Address">Address</label>
                    <InputText id="Address" @bind-Value="Box.Address" aria-describedby="Addresshelp" class="form-control" />
                    <ValidationMessage For="@(()=>Box.Address)" class="text-danger" />
                    <small id="Addresshelp" class="form-text text-muted">Enter IP address.</small>
                </div>
                <div class="form-group">
                    <label for="Port">Port</label>
                    <InputText id="Port" @bind-Value="Box.PortStr" type="number" aria-describedby="Porthelp" class="form-control" />
                    <ValidationMessage For="@(()=>Box.PortStr)" class="text-danger" />
                    <small id="Porthelp" class="form-text text-muted">Enter port.</small>
                </div>
                <button type="submit" class="btn btn-primary">Submit</button>



            </EditForm>
            @if (IsLoading)
            {
                <div class="row">
                    <div class="col text-center">
                        <div class="spinner-border text-dark" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>



@code {
    [Parameter]
    public ConfigDto Config { get; set; }
    [Parameter]
    public GrowBoxViewModel Box { get; set; } = new GrowBoxViewModel();
    [Parameter]
    public bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Config = IoTConfigService.GetConfig();
        var box = await GrowRepo.GetByIdAsync(1);
        if (box != null)
        {
            Box = Mapper.Map<GrowBoxViewModel>(box);
        }
        await base.OnInitializedAsync();
    }


    private async void HandleValidSubmit()
    {
        try
        {
            IsLoading = true;

            if (await GrowRepo.CountAsync() > 0)
            {
                await GrowRepo.UpdateAsync(Mapper.Map<GrowBox>(Box));
            }
            else
            {
                Box = Mapper.Map<GrowBoxViewModel>(await GrowRepo.AddAsync(Mapper.Map<GrowBox>(Box)));
            }
            Console.WriteLine("OnValidSubmit");
            ToastService.ShowSuccess("Growbox successfully saved", "Congratulations!");
        }
        finally
        {
            IsLoading = false;
        }
    }

}
